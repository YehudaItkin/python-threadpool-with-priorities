# python-threadpool-with-priorities
Python Realisation of very simple ThreadPool with priorities
Several scheduling polices are available
User tasks are started or one by one (single_task queue policy) or many at once (multi_task queue policy)
Scheduler is not preemptive (task cannot be send to sleep)
Aim is two compare different scheduling polices
There are a lot of definitions of fairness available. For my purposes - fair scheduling is the scheduling with
minimum average wait time (i.e time between task put in queue and the time it begins to run), Also I an interested
in difference between the processes with fastest and slowest submission rate

For now, there are:
1) random_scheduler - choose random user
2) average_runtime_scheduler - choose user with min average runtime
3) average_wait_scheduler - choose user with max wait.
4) max_waittime_scheduler - choose user with a longest wait
5) dirty_wait_scheduler - very close to max_waittime_scheduler, but counters updated on every iteration. from my experince
its the best one.
Those polices are not optimal (for a best result, several factors should be accounted), but its interesting to
compare them.
Task is chosen in O(n), that should be problem, when number of users is big

Tests with single_task policy were done on 10 users/5 processes (starvation)
Tests with multi_task policy were done on 10 users/20 processes
Every user sends request with rate 20/(user_number + 1) (i.e user #10 will send request every two seconds)
Every user send its requests during one minute (indeed its not enough for a good statistics, but its too early in the morning now)
Jobs are just time.sleep(random.randomize(1:30))
Configuration: 4*i7 + hyperthreading/16GB RAM

Results:
task_completed: 165
Approximate run time ~3 min
SINGLE_TASK_POLICY (one by one)

1) random:
    average_wait: 6.786567 sec
    difference between fastest and slowest procs: 15.851191 sec

2) average_runtime_scheduler
    average_wait: 3.499203 sec
    difference between fastest and slowest procs: 19.657294 sec

3) average_wait_scheduler
    average_wait: 4.882710 sec
    difference between fastest and slowest procs: 46.714038 sec (Very unfair guy)

4) max_waittime_scheduler
    average_wait: 3.745365 sec
    difference between fastest and slowest procs: 6.844226 sec

5) dirty_wait_scheduler
    average_wait: 3.495588 sec
    difference between fastest and slowest procs: 9.282777 sec

So there are two schedulers that are much better then random -  dirty_wait_scheduler and max_waittime_scheduler

MULTI_TASK_POLICY (many task at once)
1) random:
    average_wait: 3.688634 sec
    difference between fastest and slowest procs: 5.971199 sec

2) average_runtime_scheduler
    average_wait: 4.124542 sec
    difference between fastest and slowest procs: 8.564545 sec

3) average_wait_scheduler
    average_wait: 3.500654 sec
    difference between fastest and slowest procs: 7.223396 sec

4) max_waittime_scheduler
    average_wait: 3.204754 sec
    difference between fastest and slowest procs: 8.148414 sec

5) dirty_wait_scheduler
    average_wait: 3.683024
    difference between fastest and slowest procs: 8.186353 sec

    Result is a little bit funny - random sched. is the faster one. May be its because random scheduler doesnt
    use locks.

p.s. most of code was written between 2 and 5 am. So this code can crash your car, kill your dog or drink your beer.
Well, I really cant imagine what else it able to do





